
" General {
    " Encoding {
        set langmenu=zh_CN
        let $LANG = 'zh_CN.UTF-8'
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        set enc=utf-8
        set fenc=utf-8
        set fencs=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
        set fileencodings=utf-8,gbk,cp936,latin-1

        " set font for Chinese characters
        set guifontwide=SimHei:h11

        " For airline {
            " For powerline fonts, refer to:
            " http://www.codejury.com/consolas-font-in-vim-powerline-windows/
            set guifont=Meslo\ LG\ S\ for\ Powerline:h11,Source\ Code\ Pro\ for\ Powerline:h11,Andale_Mono:h11,Menlo:h11,Consolas:h11,Courier_New:h11,Monaco:h11
            " let g:airline_symbols = {}
            " let g:airline_left_sep = "\u2b80" "use double quotes here
            " let g:airline_left_alt_sep = "\u2b81"
            " let g:airline_right_sep = "\u2b82"
            " let g:airline_right_alt_sep = "\u2b83"
            " let g:airline_symbols.branch = "\u2b60"
            " let g:airline_symbols.readonly = "\u2b64"
            " let g:airline_symbols.linenr = "\u2b61"
        " }
    " }

    " Window {
        " start gvim maximized {
            if has("win32")
                if has("autocmd")
                au GUIEnter * simalt ~x
                endif
            endif
        " }
    " }

    " Search {
        " search the selected string
        xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
        xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>
        function! s:VSetSearch()
        let temp = @s
        norm! gv"sy
        let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
        let @s = temp
        endfunction
    " }

    " Fold {
        " we can type 'za' to open and close a fold inside a method
        set foldmethod=indent
        set foldlevel=99
    " }

    " Use the arrows to something useful {
        map <right> :bn<cr>
        map <left> :bp<cr>
    " }

    " Enable wrap
    set wrap
    " Support BundleInstall on Windows
    set noshellslash
    set nospell

    " colorscheme
    " colorscheme desertEx " use the desertEx
" }


" Plugins {

    " vim-signify {
       " we only use git here
        let g:signify_vcs_list = [ 'git' ]
    " }

    " controlP {
    " ignore the specific files
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$|FTFRoot',
            \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$|\.ima$|\.IceHead$|\.raw$' }
    " }

    " auto complete {
        " enable YouCompleteMe {
            " Bundle 'Valloric/YouCompleteMe'
            " Enable preview window for more information
            let g:ycm_add_preview_to_completeopt = 1
            " Set global conf file path
            let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
            " Enable completion in comments
            let g:ycm_complete_in_comments = 1
            " Disable cache, generate completion always
            let g:ycm_cache_omnifunc = 0
            " Completion for identifiers
            let g:ycm_seed_identifiers_with_syntax = 1
            " Change the invoke hotkey to Alt+;
            let g:ycm_key_invoke_completion = '<C-;>'
            " Disable confirmation of loading conf
            let g:ycm_confirm_extra_conf = 1
            " nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
            " Using Alt+d is much quicker
            nmap <C-d> :YcmCompleter GoToDefinitionElseDeclaration <C-R>=expand("<cword>")<CR><CR>

            " Remap Ultisnips for compatibility for YCM, Alt is mucher easier
            " comparing to Ctrl to press
            let g:UltiSnipsExpandTrigger = '<C-j>'
            let g:UltiSnipsJumpForwardTrigger = '<C-j>'
            let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
        " }

        " OmniComplete {
            " This configuration is copied from .vimrc, but we don't want
            " preview window to be closed when we haven't finished inserting.
            " So we distable spf13_no_omni_complete in .vimrc.before.local and
            " then put the configuration here with autoclose preview window
            " excluded.
            if has("autocmd") && exists("+omnifunc")
                autocmd Filetype *
                    \if &omnifunc == "" |
                    \setlocal omnifunc=syntaxcomplete#Complete |
                    \endif
            endif

            hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
            hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
            hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

            " Some convenient mappings
            inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
            inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
            inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
            inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
            inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
            inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

            " Automatically open and close the popup menu / preview window
            " au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
            set completeopt=menu,preview,longest
        " }
    " }

    " Dash {
        " start gvim maximized {
            Bundle 'rizzatti/dash.vim'
        " }
    " }
" }
